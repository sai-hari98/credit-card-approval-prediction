ccApproval = read.csv("credit_card_approval.csv")
summary(ccApproval)
View(ccApproval)
View(ccApproval)
View(ccApproval)
View(ccApproval)
ggplot(ccApproval,aes(AMT_INCOME_TOTAL,NAME_EDUCATION_LEVEL))+geom_boxplot()
library(ggplot2)
ggplot(ccApproval,aes(AMT_INCOME_TOTAL,NAME_EDUCATION_LEVEL))+geom_boxplot()
ggplot(ccApproval,aes(AMT_INCOME_TOTAL,NAME_EDUCATION_TYPE))+geom_boxplot()
summary(ccApproval)
eduLevels = as.factor(ccApproval$NAME_EDUCATION_TYPE)
levels(eduLevels)
academicSal = ccApproval[ccApproval$NAME_EDUCATION_TYPE="Academic degree",]
academicSal = ccApproval[ccApproval$NAME_EDUCATION_TYPE=="Academic degree",]
min(academicSal$AMT_INCOME_TOTAL)
max(academicSal$AMT_INCOME_TOTAL)
levels(eduLevels)
nrow(academicSal)
riskUsers = ccApproval[ccApproval$TARGET==1,]
nrow(riskusers)
riskUsers = ccApproval[ccApproval$TARGET==1,]
nrow(riskusers)
nrow(riskUsers)
1962/537667
ccApproval$AGE = ccApproval$DAYS_BIRTH/365;
ggplot(ccApproval,aes(AGE,AMT_INCOME_TOTAL))+geom_point(aes(color=NAME_EDUCATION_TYPE))
ccApproval$AGE = round(abs(ccApproval$DAYS_BIRTH)/365,0)
ggplot(ccApproval,aes(AGE,AMT_INCOME_TOTAL))+geom_point(aes(color=NAME_EDUCATION_TYPE))
ggplot(ccApproval,aes(abs(DAYS_BIRTH),AMT_INCOME_TOTAL))+geom_point(aes(color=NAME_EDUCATION_TYPE))
rm(list=ls())
cat("\014")
ccApproval = read.csv("credit_card_approval.csv")
summary(ccApproval)
ccApproval$AGE = round(abs(ccApproval$DAYS_BIRTH)/365,0)
summary(ccApproval)
sd(ccApproval$DAYS_EMPLOYED)
meanDaysEmployed = mean(ccApproval$DAYS_EMPLOYED)
sdDaysEmployed = sd(ccApproval$DAYS_EMPLOYED)
normalizedVal = (ccApproval$DAYS_EMPLOYED - meanDaysEmployed)/sdDaysEmployed
normalizedVal = data.frame(DaysEmployed = (ccApproval$DAYS_EMPLOYED - meanDaysEmployed)/sdDaysEmployed)
summary(normalizedVal)
View(ccApproval)
View(ccApproval)
View(ccApproval)
View(ccApproval)
ccApproval = read.csv("credit_card_approval.csv")
save(ccApproval)
save("ccApproval.RDS",ccApproval)
save(ccApproval, "ccApproval.RDS")
?save
#gender
ccApproval$GENDER = as.factor(ccApproval$CODE_GENDER)
ccApproval$FLAG_OWN_CAR = as.factor(ccApproval$FLAG_OWN_CAR)
ccApproval$FLAG_OWN_REALTY = as.factor(ccApproval$FLAG_OWN_REALTY)
ccApproval$EDUCATION = as.factor(ccApproval$NAME_EDUCATION_TYPE)
#converting age to years
ccApproval$AGE = round(abs(ccApproval$DAYS_BIRTH)/365,0)
ccApproval$DAYS_EMPLOYED = abs(ccApproval$DAYS_EMPLOYED)
levels(as.factor(ccApproval$JOB))
ccApproval$TARGET
ccApproval$TARGET = ifelse(ccApproval$TARGET=='C','P',ccApproval$TARGET)
#converting age to years
ccApproval$AGE = round(abs(ccApproval$DAYS_BIRTH)/365,0)
ccApproval$DAYS_EMPLOYED = abs(ccApproval$DAYS_EMPLOYED)
levels(as.factor(ccApproval$JOB))
#chance c to p to make better meaning out of it. p means paid.
ccApproval$TARGET = ifelse(ccApproval$TARGET=='C','P',ccApproval$TARGET)
ccApproval$BEGIN_MONTHS = abs(ccApproval$BEGIN_MONTHS)
set.seed(123)
train = sample(1:nrow(ccApproval),(2/3)*nrow(ccApproval))
ccApproval.train = ccApproval[train,]
ccApproval.test = ccApproval[-train,]
decisionTree <- predict(target~., ccApproval.train, method="class",
control = rpart.control(xval=0, minsplit = 1000))
decisionTree <- rpart(target~., ccApproval.train, method="class",
control = rpart.control(xval=0, minsplit = 1000))
library(rpart)
decisionTree <- rpart(target~., ccApproval.train, method="class",
control = rpart.control(xval=0, minsplit = 1000))
decisionTree <- rpart(TARGET ~ ., ccApproval.train, method="class",
control = rpart.control(xval=0, minsplit = 1000))
plot(fit, uniform=TRUE,  # space out the tree evenly
branch=1,         # make elbow type branches, #branch=0 means the branch shape will be v shape
main="Classification Tree for Risk Users",
margin=0.05)
plot(decisionTree, uniform=TRUE,  # space out the tree evenly
branch=1,         # make elbow type branches, #branch=0 means the branch shape will be v shape
main="Classification Tree for Risk Users",
margin=0.05)
decisionTree
rpart.plot(decisionTree, type = 1, extra = 1, main="Classification Tree for Risk Users")
library(rpart.plot)
rpart.plot(decisionTree, type = 1, extra = 1, main="Classification Tree for Risk Users")
decisionTree1 <- rpart(TARGET ~ ., ccApproval.train, method="class",
control = rpart.control(xval=10, minsplit=2, cp=0))
rpart.plot(decisionTree1, type = 1, extra = 1, main="Classification Tree for Risk Users")
prediction <- predict(decisionTree, ccApproval.test, type="class")
prediction1 <- predict(decisionTree1, ccApproval.test, type="class")
actual <- ccApproval.test$TARGET
cm <- table(prediction,actual)
accuracy <- (cm[1,1]+cm[2,2])/length(actual)
accuracy
cm
cm <- table(prediction1,actual)
cm
mean(c(1,2,3,4,5,6))
SD = function(x){
sqrt(sum((x-mean(x)^2))/length(x))
}
SD(c(1,2,3,4,5,6))
x = c(1,2,3,4,5,6)
x-mean(x)
x-mean(x)^2
(x-mean(x)^2
(x-mean(x))^2
(x-mean(x))^2
(x-mean(x))**2
(x-mean(x))**2
View(ccApproval)
View(ccApproval)
#chance c to p to make better meaning out of it. p means paid.
ccApproval$STATUS = ifelse(ccApproval$STATUS=='C','P',ccApproval$STATUS)
ccApproval$BEGIN_MONTHS = abs(ccApproval$BEGIN_MONTHS)
nrow(riskUsers)
riskUsers = ccApproval[ccApproval$TARGET==1,]
nrow(riskUsers)
ccApproval.smote <- smote(TARGET~.,ccApproval, perc.over=5000, perc.under=550)
#smote
install.packages(DMwR)
library(DMwR)
#smote
install.packages(DMwR2)
install.packages("DMwR2")
#smote
install.packages("DMwR")
library(DMwR2)
ccApproval.smote <- smote(TARGET~.,ccApproval, perc.over=5000, perc.under=550)
library(DMwR)
#smote
install.packages("DMwR")
library(DMwR)
#smote
install.packages("performanceEstimation")
library("performanceEstimation")
ccApproval.smote <- smote(TARGET~.,ccApproval, perc.over=5000, perc.under=550)
ccApproval$TARGET = as.factor(ccApproval$TARGET)
#chance c to p to make better meaning out of it. p means paid.
ccApproval$STATUS = ifelse(ccApproval$STATUS=='C','P',ccApproval$STATUS)
ccApproval$BEGIN_MONTHS = abs(ccApproval$BEGIN_MONTHS)
ccApproval.smote <- smote(TARGET~.,ccApproval, perc.over=5000, perc.under=550)
riskUsers = ccApproval[ccApproval$TARGET==1,]
nrow(riskUsers)
nrow(riskUsers)/nrow(ccApproval)
(nrow(riskUsers)/nrow(ccApproval))*100
ccApproval.smote <- smote(TARGET~.,ccApproval, perc.over=5000, perc.under=550)
#smote
install.packages("performanceEstimation")
library("performanceEstimation")
ccApproval.smote <- smote(TARGET~.,ccApproval, perc.over=5000, perc.under=550)
